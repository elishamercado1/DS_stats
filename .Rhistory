consumption_hist + geom_vline(aes(xintercept=mean(consumption)),
color="blue", linetype="dashed", size=1)
consumption_hist <- ggplot2::ggplot(raw_energy_data) +
aes(x=consumption) +
geom_histogram(bins=15) +
labs(x="Consumption", y ="Count") +
ggtitle("Histogram of Consumption") +
theme(plot.title = element_text(hjust = 0.5))
consumption_hist + geom_vline(aes(xintercept=mean(consumption)),
color="blue", linetype="dashed", size=1)
consumption_hist <- ggplot2::ggplot(raw_energy_data) +
aes(x=consumption) +
geom_histogram(bins=15) +
labs(x="Consumption (kWh)", y ="Count") +
ggtitle("Histogram of Consumption") +
theme(plot.title = element_text(hjust = 0.5))
consumption_hist + geom_vline(aes(xintercept=mean(consumption)),
color="blue", linetype="dashed", size=1)
consumption_hist <- ggplot2::ggplot(raw_energy_data) +
aes(x=consumption) +
geom_histogram(bins=30) +
labs(x="Consumption (kWh)", y ="Count") +
ggtitle("Histogram of Consumption") +
theme(plot.title = element_text(hjust = 0.5))
consumption_hist + geom_vline(aes(xintercept=mean(consumption)),
color="blue", linetype="dashed", size=1)
consumption_hist <- ggplot2::ggplot(raw_energy_data) +
aes(x=consumption) +
geom_histogram(bins=20) +
labs(x="Consumption (kWh)", y ="Count") +
ggtitle("Histogram of Consumption") +
theme(plot.title = element_text(hjust = 0.5))
consumption_hist + geom_vline(aes(xintercept=mean(consumption)),
color="blue", linetype="dashed", size=1)
ggplot2::ggplot(raw_energy_data) +
aes(x = income) +
geom_boxplot() +
labs(x="Income") +
ggtitle("Boxplot of Income") +
theme(plot.title = element_text(hjust = 0.5)) +
stat_boxplot(geom = 'errorbar',width = 0.2)
alternative <-ggplot2::ggplot(raw_energy_data) +
aes(y=income) +
coord_flip() +
geom_boxplot() +
labs(x="Income") +
ggtitle("Boxplot of Income") +
theme(plot.title = element_text(hjust =0.5)) +
stat_boxplot(geom = 'errorbar',width = 0.2)
ggplot2::ggplot(raw_energy_data) +
aes(x = income) +
geom_boxplot() +
labs(x="Income") +
ggtitle("Boxplot of Income") +
theme(plot.title = element_text(hjust = 0.5)) +
stat_boxplot(geom = 'errorbar',width = 0.2)
alternative <-ggplot2::ggplot(raw_energy_data) +
aes(y=income) +
coord_flip() +
geom_boxplot() +
labs(x="Income") +
ggtitle("Boxplot of Income") +
theme(plot.title = element_text(hjust =0.5)) +
stat_boxplot(geom = 'errorbar',width = 0.2)
# Scale the value variable to give standard value
standard_value <- scale(raw_energy_data$income)
# Check for values greater than 3
standard_value[standard_value > 3]
# check for scores smaller than -3
standard_value[standard_value < -3]
energy_data <- raw_energy_data %>%
mutate(scaled_income = scale(income)) %>%
filter(scaled_income < 3) %>%
filter(scaled_income > -3)
nrow(energy_data)
sample(energy_data$income, 10)
sample(energy_data$scaled_income, 10)
energy_data %>% count(property_type) %>% arrange(desc(n))
energy_data %>% count(tenure) %>% arrange(desc(n))
ggplot2::ggplot(data = energy_data) +
aes(x = property_type) +
geom_bar() +
labs(x="Type of Property", y ="Count") +
ggtitle("Frequency of Different Property Type") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot2::ggplot(data = energy_data) +
aes(x = property_age) +
geom_bar() +
labs(x="Age of Property", y ="Count") +
ggtitle("Frequency of Different Property Ages") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
airquality_data <- janitor::clean_names(airquality)
dplyr::glimpse(airquality_data)
unique(airquality_data$month)
airquality_data$month <- factor(x=airquality_data$month)
airquality_data <- airquality_data     %>%
mutate(solar_r=as.numeric(solar_r)) %>%
mutate(ozone=as.numeric(ozone))     %>%
mutate(temp=as.numeric(temp))
dplyr::glimpse(airquality_data)
summary(airquality_data)
moments::skewness(x=airquality_data$ozone, na.rm = TRUE)
ggplot2::ggplot(data = airquality_data) +
aes(x = ozone, y = solar_r) +
geom_miss_point() +
facet_wrap(~month, ncol = 2) +
theme(legend.position = "bottom")
?geom_miss_point
airquality_data <- airquality_data %>%
dplyr::mutate(solar_r=
dplyr::if_else(condition=is.na(solar_r),
true = mean(solar_r, na.rm = TRUE),
false=solar_r))
airquality_data <- airquality_data %>%
dplyr::mutate(ozone=
dplyr::if_else(condition=is.na(ozone),
true = mean(ozone, na.rm = TRUE),
false=ozone))
ggplot2::ggplot(data = airquality_data) +
aes(x =solar_r, y = wind, colour = month) +
geom_point() +
labs(x="Solar Radiations (Langleys)",
y ="Wind (miles per hours)" ) +
ggtitle("Wind Speed and Solar Radiations from May till September") +
theme(plot.title = element_text(hjust = 0.5))
ggplot2::ggplot(data = airquality_data) +
aes(x =temp, y = wind, colour = month) +
geom_point() +
labs(x="Solar Radiations (Langleys)",
y ="Wind (miles per hours)" ) +
ggtitle("Wind Speed and Solar Radiations from May till September") +
theme(plot.title = element_text(hjust = 0.5))
ggplot2::ggplot(data = airquality_data) +
aes(x =temp, y = wind, colour = month) +
geom_point() +
labs(x="Temperature (Celsius)",
y ="Wind (miles per hour)" ) +
ggtitle("Wind Speed and Temperature from May till September") +
theme(plot.title = element_text(hjust = 0.5))
ggplot2::ggplot(data = airquality_data) +
aes(x =temp, y = wind, colour = month) +
geom_point() +
labs(x="Temperature (F)",
y ="Wind (miles per hour)" ) +
ggtitle("Wind Speed and Temperature from May till September") +
theme(plot.title = element_text(hjust = 0.5))
cor(x=airquality_data$temp,y=airquality_data$wind)
scatterplot_matrix <- GGally::ggpairs(data=airquality_data)
scatterplot_matrix
GGally::getPlot(pm= scatterplot_matrix, i=1, j=5)
# Scatterplot matrix using base R
base_r_matrix <- pairs(airquality_data)
base_r_matrix
# Scatterplot matrix using base R
base_r_matrix <- pairs(airquality_data)
# Scatterplot matrix using base R
base_r_matrix <- pairs(airquality_data)
energy_data$floor_area <- factor(energy_data$floor_area,
levels = c("50 or less", "51 to 100",
"101 to 150", "151 to 200",
"201 to 250","Over 250"))
energy_data %>%
count(property_type, floor_area) %>%
ggplot2::ggplot() +
aes(x = property_type,
y = floor_area, fill = n) +
geom_tile() +
labs(x="Type of Property",
y = expression("Floor Area (m"^2*")")) +
scale_fill_gradient(low="white", high="blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
GGally::getPlot(pm= scatterplot_matrix, i=1, j=5)
scatterplot_matrix <- GGally::ggpairs(data=airquality_data)
scatterplot_matrix
energy_data %>%
count(property_type, floor_area) %>%
ggplot2::ggplot() +
aes(x = property_type,
y = floor_area, fill = n) +
geom_tile() +
labs(x="Type of Property",
y = expression("Floor Area (m"^2*")")) +
scale_fill_gradient(low="white", high="blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dplyr::filter(.data=energy_data,
country == "England"|country == "Wales") %>%
ggplot2::ggplot() +
aes(x=consumption, fill=country) +
geom_density(alpha=0.4)
filtered_property <- energy_data %>%
filter(property_type != "NA") %>%
select(property_type, consumption)
View(filtered_property)
# Use the function geom_boxplot to see the spread of data of gas consumption by different type of properties.
filtered_property |>
ggplot() +
aes(x = property_type, y = consumption) +
geom_boxplot()
library(tidyverse) # For data manipulation
energy_data <- readr::read_csv("../Data/energy_data.csv")
energy_data <- readr::read_csv("./Data/energy_data.csv")
airquality_data <- readr::read_csv("./Data/airquality_data.csv")
# A formula for variables x and a saved as object c
c <- x ~ a
# class of c?
class(c)
# class of c?
class(c)
consumption ~ tenure + region + property_age
property_type_data <- energy_data %>%
filter(property_type != "NA") %>%
select(property_type, consumption)
# We want to see the counts of each group
property_type_data %>% group_by(property_type) %>% count()
qqplot_property_type <- ggplot2::ggplot(property_type_data) +
aes(sample = consumption,
colour = factor(property_type)) +
stat_qq()
qqplot_property_type
qqplot_property_type + stat_qq_line()
# Grouped tibble by property_type
groupby_property_type <- dplyr::group_by(property_type_data,
property_type)
standard_consumption <- dplyr::summarise(groupby_property_type,
sd_consump=sd(consumption,na.rm = TRUE))
View(standard_consumption)
standard_consumption
max(standard_consumption$sd_consump)/min(standard_consumption$sd_consump)
one_way_anova <- aov(consumption~property_type, data=property_type_data)
# Summary of the analysis
summary(one_way_anova)
# Decide significance level
alpha <- 0.05
qf(p= 1-alpha, df1= 6, df2 =  1069)
glimpse(energy_data)
floor_area_subset <- energy_data |>
select(consumption, floor_area)
floor_area_subset <- energy_data |>
select(consumption, floor_area) |>
any_na()
any_na(floor_area_subset)
qqplot_floor_area <- ggplot2::ggplot(floor_area_subset) +
aes(sample = floor_area,
colour = factor(property_type)) +
stat_qq()
qqplot_floor_area <- ggplot2::ggplot(floor_area_subset) +
aes(sample = consumption,
colour = factor(floor_area)) +
stat_qq()
floor_area_subset <- energy_data |>
select(consumption, floor_area)
qqplot_floor_area <- ggplot2::ggplot(floor_area_subset) +
aes(sample = consumption,
colour = factor(floor_area)) +
stat_qq()
qqplot_floor_area
qqplot_floor_area + stat_qq_line()
# Grouped tibble by property_type
groupby_floor_area <- dplyr::group_by(floor_area_subset,
floor_area)
standard_floor_consumption <- dplyr::summarise(groupby_floor_area,
sd_consump=sd(consumption,na.rm = TRUE))
standard_consumption
max(standard_floor_consumption$sd_consump)/min(standard_floor_consumption$sd_consump)
one_way_anova_floor <- aov(consumption~floor_area, data=floor_area_subset)
# Summary of the analysis
summary(one_way_anova_floor)
# Decide significance level
alpha <- 0.05
qf(p= 1-alpha, df1= 6, df2 =  1069)
library(tidyverse) # For data manipulation
energy_data <- readr::read_csv("./Data/energy_data.csv")
airquality_data <- readr::read_csv("./Data/airquality_data.csv")
# A formula for variables x and a saved as object c
# The tilde ~ generally characterises formulae (of the class formula) written in R.
# It means “capture the meaning of the code here without immediately evaluating it”.
c <- x ~ a
# class of c?
class(c)
consumption ~ tenure + region + property_age
property_type_data <- energy_data %>%
filter(property_type != "NA") %>%
select(property_type, consumption)
# We want to see the counts of each group
property_type_data %>% group_by(property_type) %>% count()
qqplot_property_type <- ggplot2::ggplot(property_type_data) +
aes(sample = consumption,
colour = factor(property_type)) +
stat_qq()
qqplot_property_type
qqplot_property_type + stat_qq_line()
# Grouped tibble by property_type
groupby_property_type <- dplyr::group_by(property_type_data,
property_type)
standard_consumption <- dplyr::summarise(groupby_property_type,
sd_consump=sd(consumption,na.rm = TRUE))
standard_consumption
max(standard_consumption$sd_consump)/min(standard_consumption$sd_consump)
one_way_anova <- aov(consumption~property_type, data=property_type_data)
# Summary of the analysis
summary(one_way_anova)
# Decide significance level
alpha <- 0.05
# Decide significance level
alpha <- 0.05
qf(p= 1-alpha, df1= 6, df2 =  1069)
floor_area_subset <- energy_data |>
select(consumption, floor_area)
qqplot_floor_area <- ggplot2::ggplot(floor_area_subset) +
aes(sample = consumption,
colour = factor(floor_area)) +
stat_qq()
qqplot_floor_area
qqplot_floor_area + stat_qq_line()
# Grouped tibble by property_type
groupby_floor_area <- dplyr::group_by(floor_area_subset,
floor_area)
standard_floor_consumption <- dplyr::summarise(groupby_floor_area,
sd_consump=sd(consumption,na.rm = TRUE))
standard_floor_consumption
max(standard_floor_consumption$sd_consump)/min(standard_floor_consumption$sd_consump)
one_way_anova_floor <- aov(consumption~floor_area, data=floor_area_subset)
# Summary of the analysis
summary(one_way_anova_floor)
# Decide significance level
alpha <- 0.05
qf(p= 1-alpha, df1= 6, df2 =  1069)
# Other methods that we can use
p.adjust.methods
# Conduct pairwise t-test
pairwise.t.test(x=property_type_data$consumption,
g=property_type_data$property_type,
p.adjust.method="bonferroni")
# Tukey's test
tukey <- TukeyHSD(one_way_anova)
par(mar=c(5,13,3,3))
plot(tukey, col = "brown",las=1)
# Tukey's test
tukey_floor <- TukeyHSD(one_way_anova_floor)
par(mar=c(5,13,3,3))
plot(tukey_floor, col = "brown",las=1)
ggplot2::ggplot(data = airquality_data) +
aes(x = wind, y = ozone) +
geom_point() +
labs(x="Wind (miles per hour)",
y ="Ozone parts (per billion)") +
ggtitle("Wind and Ozone from May till September") +
theme(plot.title = element_text(hjust = 0.5))
help(lm)
simple_model <- lm(formula=ozone ~ wind, data=airquality_data)
# Get a summary of the model
summary(simple_model)
wind_speed <- c(7,8)
85.2-4.32*wind_speed
colnames(airquality_data)
tempozone_model <- lm(formula = ozone~temp, data = airquality_data)
summary(tempozone_model)
new_wind <- data.frame(wind = c(23, 26, 30))
# Use the predict function on new values
# And also get confidence intervals for these
predict(simple_model, newdata = new_wind, interval = "confidence")
new_temp <- data.frame(temp = c(48, 52, 55))
predict(tempozone_model, newdata = new_temp, interval = "confidence")
# First specify your formula then the dataset
multiple_model <- lm(formula=ozone ~ wind + temp, data=airquality_data)
# Get a summary of the model
summary(multiple_model)
# Exercise
# Fit a multiple linear regression model with explanatory variables wind, temp and solar_r.
multiple_model_solar <- lm(formula=ozone ~ wind + temp +solar, data=airquality_data)
summary(multiple_model_solar)
# Exercise
# Fit a multiple linear regression model with explanatory variables wind, temp and solar_r.
multiple_model_solar <- lm(formula=ozone ~ wind + temp +solar_r, data=airquality_data)
summary(multiple_model_solar)
centre_temp <- scale(airquality_data$temp,center = TRUE, scale = FALSE)
centre_wind <- scale(airquality_data$wind,center = TRUE, scale = FALSE)
interaction_model <- lm(formula=ozone ~ centre_wind + centre_temp +
centre_wind:centre_temp, data=airquality_data)
# Or only use * between two variables - a*b is equivalent to a + b + a:b
interaction_model <- lm(formula=ozone ~ centre_wind*centre_temp,
data=airquality_data)
# Get a summary of the model
summary(interaction_model)
centre_solar <- scale(airquality_data$solar_r,center = TRUE, scale = FALSE)
interaction_solar <- lm(formula=ozone ~ centre_temp*centre_solar,
data=airquality_data)
summary(interaction_solar)
library(tidyverse) # For data manipulation
library(car)       # For finding multicollinearity in a regression model
library(leaps)     # For model selection
install.packages("leaps")
library(leaps)     # For model selection
energy_data <- readr::read_csv("../Data/energy_data.csv")
airquality_data <- readr::read_csv("../Data/airquality_data.csv")
energy_data <- readr::read_csv("./Data/energy_data.csv")
airquality_data <- readr::read_csv("./Data/airquality_data.csv")
par(mfrow = c(2, 2))
simple_model <- lm(formula=ozone ~ wind, data=airquality_data)
plot(simple_model)
# Check linearity
# Create the first diagnostic plot
plot(simple_model,1)
# Check normality of residuals
# Create the second diagnostic plot
plot(simple_model,2)
# check homoscedasticity
# Create the third diagnostic plot
plot(simple_model,3)
# Create the 5th diagnostic plot
plot(simple_model,5)
plot(simple_model,4)
View(airquality_data)
full_model <- lm(formula=ozone ~ ., data=airquality_data)
plot(full_model)
summary(full_model)
plot(full_model)
# Check linearity
# Create the first diagnostic plot
plot(full_model,1)
plot(full_model)
# Check linearity
# Create the first diagnostic plot
plot(full_model,1)
# Check normality of residuals
# Create the second diagnostic plot
plot(simple_model,2)
# check homoscedasticity
# Create the third diagnostic plot
plot(simple_model,3)
# Check normality of residuals
# Create the second diagnostic plot
plot(full_model,2)
# check homoscedasticity
# Create the third diagnostic plot
plot(full_model,3)
# check homoscedasticity
# Create the third diagnostic plot
plot(full_model,3)
# Create the 5th diagnostic plot
plot(simple_model,5)
# Create the 5th diagnostic plot
plot(full_model,5)
12/153
# Create the 4th diagnostic plot
plot(full_model,4)
ggplot2::ggplot(airquality_data) +
aes(x=wind, y=ozone) +
geom_point() +
labs(x="Wind (miles per hours)",
y = "Ozone concentration (per billions)") +
ggtitle("Ozone Concentration and Wind Speed from May till September") +
theme(plot.title = element_text(hjust = 0.5))
# Apply algorithm transformation on the response variable
# wind is the explanatory variable
log_model <- lm(formula=log(ozone) ~ wind, data=airquality_data)
summary(log_model)
full_log <- lm(formula=log(ozone) ~ ., data = airquality_data)
summary(full_log)
par(mfrow = c(2, 2))
plot(full_log)
model_one <- lm(formula=ozone ~ temp + solar_r, data=airquality_data)
model_two <- lm(formula=ozone ~ ., data=airquality_data)
broom::glance(model_one)
broom::glance(model_two)
model_a <- lm(formula=ozone ~ solar_r + month, data=airquality_data)
model_b <- lm(formula=ozone ~ ., data=airquality_data)
glance(model_a)
broom::glance(model_a)
broom::glance(model_b)
# Use the variance inflation factor from the car package
# multiple_exercise is the multiple linear regression model
# which contains all explanatory variables
# that was created in the first section exercise
car::vif(multiple_exercise)
# Use the variance inflation factor from the car package
# multiple_exercise is the multiple linear regression model
# which contains all explanatory variables
# that was created in the first section exercise
car::vif(full_model)
# Model selection ---------------------------------------------------------
# Stepwise
# Backward
full_model_b <- lm(formula=ozone~., data = airquality_data)
# Model selection ---------------------------------------------------------
# Stepwise
# Backward
full_model <- lm(formula=ozone~., data = airquality_data)
backward_selection <- step(full_model, direction = "backward")
best_model <- leaps::regsubsets(ozone~., data = airquality_data,
nvmax = 5, method = "seqrep")
summarise_model <- summary(best_model)
summarise_model
data.frame(Adj_R2 = which.max(summarise_model$adjr2),
RSS = which.min(summarise_model$rss),
BIC = which.min(summarise_model$bic))
best_model_exercise <- leaps::regsubsets(ozone~., data = airquality_data,
nvmax = 3, method = "backward")
summarise_exercise <- summary(best_model_exercise
summarise_exercise <- summary(best_model_exercise)
summarise_exercise <- summary(best_model_exercise)
summarise_exercise
# Find the best model using the metrics such as Adjusted R2 , RSS (residual sum of squares) and BIC.
data.frame(Adj_R2 = which.max(summarise_exercise$adjr2),
RSS = which.min(summarise_exercise$$rss),
BIC = which.min(summarise_exercise$$bic))
# Find the best model using the metrics such as Adjusted R2 , RSS (residual sum of squares) and BIC.
data.frame(Adj_R2 = which.max(summarise_exercise$adjr2),
RSS = which.min(summarise_exercise$rss),
BIC = which.min(summarise_exercise$bic))
